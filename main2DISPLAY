


//*****************************************************************************
//
// Application Name     -   SSL Demo
// Application Overview -   This is a sample application demonstrating the
//                          use of secure sockets on a CC3200 device.The
//                          application connects to an AP and
//                          tries to establish a secure connection to the
//                          Google server.
// Application Details  -
// docs\examples\CC32xx_SSL_Demo_Application.pdf
// or
// http://processors.wiki.ti.com/index.php/CC32xx_SSL_Demo_Application
//
//*****************************************************************************

//*****************************************************************************
// Pin Connections
//   MOSI (SI)  P7 on P2 header
//   SCK (CL)   P5 on P1 header
//   DC         P62 on P1 header
//   RESET (R)  P59 on P1 header
//   OLEDCS (OC) P61 on P1
//   SDCS (SC)  n.c. (no connection)
//   MISO (SO)  n.c. (no connection)
//   CD         n.c. (no connection)
//   3V         n.c. (no connection)
//   Vin (+)    3.3V
//   GND (G)    GND
//  IR SENSOR   P63 on p3
//
//  (INTERNAL)
//  SW2     P15 GPIOA2_BASE, .pin = 0x40
//  SW3     P4  GPIOA1_BASE, .pin = 0x20
//
//
//*****************************************************************************

#include <stdio.h>

// Simplelink includes
#include "simplelink.h"

//Driverlib includes
#include "hw_types.h"
#include "hw_memmap.h"
#include "hw_common_reg.h"
#include "hw_nvic.h"
#include "hw_ints.h"
#include "rom.h"
#include "rom_map.h"
#include "interrupt.h"
#include "prcm.h"
#include "utils.h"
#include "uart.h"
#include "spi.h"

//Common interface includes
#include "Adafruit_SSD1351.h"
#include "Adafruit_GFX.h"
#include "glcdfont.h"
#include "oled_test.h"
#include "pin_mux_config.h"
#include "gpio_if.h"
#include "gpio.h"
#include "common.h"
#include "uart_if.h"
#include "systick.h"

//#include "Adafruit_EX.c"

// Custom includes
#include "utils/network_utils.h"

typedef struct PinSetting {
    unsigned long port;
    unsigned int pin;
} PinSetting;


static const PinSetting IR = { .port = GPIOA1_BASE, .pin = 0x20};
static const PinSetting CAP = { .port = GPIOA1_BASE, .pin = 0x20};
static const PinSetting BUTTON = { .port = GPIOA1_BASE, .pin = 0x20};
static const PinSetting switch2 = { .port = GPIOA2_BASE, .pin = 0x40};
static const PinSetting switch3 = { .port = GPIOA1_BASE, .pin = 0x20};

//NEED TO UPDATE THIS FOR IT TO WORK!
#define DATE                31    /* Current Date */
#define MONTH               5     /* Month 1-12 */
#define YEAR                2025  /* Current year */
#define HOUR                13    /* Time - hours */
#define MINUTE              317    /* Time - minutes */
#define SECOND              0     /* Time - seconds */


#define APPLICATION_NAME      "SSL"
#define APPLICATION_VERSION   "SQ24"
#define SERVER_NAME           "a1caql46tkmrrp-ats.iot.us-east-2.amazonaws.com" // CHANGE ME
#define GOOGLE_DST_PORT       8443


#define POSTHEADER "POST /things/meetam_cc3200/shadow HTTP/1.1\r\n"             // CHANGE ME
#define HOSTHEADER "Host: a1caql46tkmrrp-ats.iot.us-east-2.amazonaws.com\r\n"  // CHANGE ME
#define CHEADER "Connection: Keep-Alive\r\n"
#define CTHEADER "Content-Type: application/json; charset=utf-8\r\n"
#define CLHEADER1 "Content-Length: "
#define CLHEADER2 "\r\n\r\n"

#define DATA1 "{" \
            "\"state\": {\r\n"                                              \
                "\"desired\" : {\r\n"                                       \
                    "\"var\" :\""                                           \
                        "Hello phone, "                                     \
                        "message from CC3200 via AWS IoT!"                  \
                        "\"\r\n"                                            \
                "}"                                                         \
            "}"                                                             \
        "}\r\n\r\n"


#define DATAHEAD "{" \
            "\"state\": {\r\n"                                              \
                "\"desired\" : {\r\n"                                       \

// Variables here: e.g. " "default" : ... , "var": ... "

#define DATAFOOT "\"\r\n"                                            \
                "}"                                                         \
            "}"                                                             \
        "}\r\n\r\n"


#define GETHEADER "GET /things/meetam_cc3200/shadow HTTP/1.1\r\n"

//*****************************************************************************
//                 GLOBAL VARIABLES -- Start
//*****************************************************************************

#if defined(ccs) || defined(gcc)
extern void (* const g_pfnVectors[])(void);
#endif
#if defined(ewarm)
extern uVectorEntry __vector_table;
#endif

//*****************************************************************************
//                 GLOBAL VARIABLES -- End: df
//*****************************************************************************


//****************************************************************************
//                      LOCAL FUNCTION PROTOTYPES
//****************************************************************************
static int set_time();
static void BoardInit(void);
static int http_post(int);

//*****************************************************************************
//
//! Board Initialization & Configuration
//!
//! \param  None
//!
//! \return None
//
//*****************************************************************************


//*****************************************************************************
//
//! Board Initialization & Configuration
//!
//! \param  None
//!
//! \return None
//
//*****************************************************************************
static void BoardInit(void) {
/* In case of TI-RTOS vector table is initialize by OS itself */
#ifndef USE_TIRTOS
  //
  // Set vector table base
  //
#if defined(ccs)
    MAP_IntVTableBaseSet((unsigned long)&g_pfnVectors[0]);
#endif
#if defined(ewarm)
    MAP_IntVTableBaseSet((unsigned long)&__vector_table);
#endif
#endif
    //
    // Enable Processor
    //
    MAP_IntMasterEnable();
    MAP_IntEnable(FAULT_SYSTICK);

    PRCMCC3200MCUInit();
}

/**
 * Initializes SPI
 */
static void SPIInit(void) {
    MAP_SPIReset(GSPI_BASE);
    MAP_SPIConfigSetExpClk(GSPI_BASE, MAP_PRCMPeripheralClockGet(PRCM_GSPI),
                           8000000, SPI_MODE_MASTER, SPI_SUB_MODE_0,
                           (SPI_SW_CTRL_CS |
                            SPI_4PIN_MODE |
                            SPI_TURBO_OFF |
                            SPI_CS_ACTIVELOW |    // most SSD1351 modules use ACTIVELOW
                            SPI_WL_8));

    MAP_SPIEnable(GSPI_BASE);

}


//*****************************************************************************
//
//! Main 
//!
//! \param  none
//!
//! \return None
//!
//*****************************************************************************
void main() {
    long lRetVal = -1;
    //
    // Initialize board configuration
    //
    BoardInit();

    PinMuxConfig();

    //
    // Enable the SPI module clock
    //
    SPIInit();

    InitTerm();
    ClearTerm();
    UART_PRINT("My terminal works!\n\r");

    //
    // Initialize Adafruit OLED
    //
    Adafruit_Init();
    fillScreen(BLACK);

    fillCircle(WIDTH/2, HEIGHT/2, 10, RED);

    int i = 0;
    while(1){
        if(i== 98){
            i = 0;

            fillRect(1, i, 30, 4, WHITE);
            fillRect(33, i, 30, 4, RED);
        }
        //testC(1, i, WHITE);
        //testC(33, i, RED);
        drawFastHLine(1, i+5, 30, WHITE);
        drawFastHLine(33, i+5, 30, RED);
        MAP_UtilsDelay(16);
        //testC(1, i, BLACK);
        //testC(33, i, BLACK);
        drawFastHLine(1, i, 30,  BLACK);
        drawFastHLine(33, i, 30,  BLACK);
        i++;
    }

}
//*****************************************************************************
//
// Close the Doxygen group.
//! @}
//
//*****************************************************************************

static int http_post(int iTLSSockID){
    char acSendBuff[512];
    char acRecvbuff[1460];
    char cCLLength[200];
    char* pcBufHeaders;
    int lRetVal = 0;

    pcBufHeaders = acSendBuff;
    strcpy(pcBufHeaders, POSTHEADER);
    pcBufHeaders += strlen(POSTHEADER);
    strcpy(pcBufHeaders, HOSTHEADER);
    pcBufHeaders += strlen(HOSTHEADER);
    strcpy(pcBufHeaders, CHEADER);
    pcBufHeaders += strlen(CHEADER);
    strcpy(pcBufHeaders, "\r\n\r\n");

    int dataLength = strlen(DATA1);

    strcpy(pcBufHeaders, CTHEADER);
    pcBufHeaders += strlen(CTHEADER);
    strcpy(pcBufHeaders, CLHEADER1);

    pcBufHeaders += strlen(CLHEADER1);
    sprintf(cCLLength, "%d", dataLength);

    strcpy(pcBufHeaders, cCLLength);
    pcBufHeaders += strlen(cCLLength);
    strcpy(pcBufHeaders, CLHEADER2);
    pcBufHeaders += strlen(CLHEADER2);

    strcpy(pcBufHeaders, DATA1);
    pcBufHeaders += strlen(DATA1);

    int testDataLength = strlen(pcBufHeaders);

    UART_PRINT(acSendBuff);


    //
    // Send the packet to the server */
    //
    lRetVal = sl_Send(iTLSSockID, acSendBuff, strlen(acSendBuff), 0);
    if(lRetVal < 0) {
        UART_PRINT("POST failed. Error Number: %i\n\r",lRetVal);
        sl_Close(iTLSSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    lRetVal = sl_Recv(iTLSSockID, &acRecvbuff[0], sizeof(acRecvbuff), 0);
    if(lRetVal < 0) {
        UART_PRINT("Received failed. Error Number: %i\n\r",lRetVal);
        //sl_Close(iSSLSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
           return lRetVal;
    }
    else {
        acRecvbuff[lRetVal+1] = '\0';
        UART_PRINT(acRecvbuff);
        UART_PRINT("\n\r\n\r");
    }

    return 0;
}


//// HTTP POST request - concatenate headers, TXMsg string, and footers to post message
//static int http_postmsg(){
//    char acSendBuff[512];
//    char acRecvbuff[1460];
//    char cCLLength[200]; //data len
//    char* pcBufHeaders;
//    int lRetVal = 0;
//    int iTLSSockID = iSockID;
//
//    char cDataBuff[200];
//    char* pcDataBufHeaders;
//
//    // concatenate DATAGEAD + TXMsg + DATAFOOT to one string
//    pcDataBufHeaders = cDataBuff;
//    strcpy(pcDataBufHeaders, DATAHEAD);
//    pcDataBufHeaders += strlen(DATAHEAD);
//    strcpy(pcDataBufHeaders, TXMsg);
//    pcDataBufHeaders += strlen(TXMsg);
//    strcpy(pcDataBufHeaders, DATAFOOT);
//    pcDataBufHeaders += strlen(DATAFOOT);
//
//    int dataLength = strlen(cDataBuff);
//
//
//    pcBufHeaders = acSendBuff;
//    strcpy(pcBufHeaders, POSTHEADER);
//    pcBufHeaders += strlen(POSTHEADER);
//    strcpy(pcBufHeaders, HOSTHEADER);
//    pcBufHeaders += strlen(HOSTHEADER);
//    strcpy(pcBufHeaders, CHEADER);
//    pcBufHeaders += strlen(CHEADER);
//    strcpy(pcBufHeaders, "\r\n\r\n");
//
//    strcpy(pcBufHeaders, CTHEADER);
//    pcBufHeaders += strlen(CTHEADER);
//    strcpy(pcBufHeaders, CLHEADER1);
//
//    pcBufHeaders += strlen(CLHEADER1);
//
//    sprintf(cCLLength, "%d", dataLength);
//
//    strcpy(pcBufHeaders, cCLLength);
//    pcBufHeaders += strlen(cCLLength);
//    strcpy(pcBufHeaders, CLHEADER2);
//    pcBufHeaders += strlen(CLHEADER2);
//
//    strcpy(pcBufHeaders, cDataBuff);
//    pcBufHeaders += strlen(cDataBuff);
//
//    int testDataLength = strlen(pcBufHeaders);
//
//    UART_PRINT(acSendBuff);
//
//
//    //
//    // Send the packet to the server */
//    //
//    lRetVal = sl_Send(iTLSSockID, acSendBuff, strlen(acSendBuff), 0);
//    if(lRetVal < 0) {
//        UART_PRINT("POST failed. Error Number: %i\n\r",lRetVal);
//        sl_Close(iTLSSockID);
//        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
//        return lRetVal;
//    }
//    lRetVal = sl_Recv(iTLSSockID, &acRecvbuff[0], sizeof(acRecvbuff), 0);
//    if(lRetVal < 0) {
//        UART_PRINT("Received failed. Error Number: %i\n\r",lRetVal);
//        //sl_Close(iSSLSockID);
//        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
//           return lRetVal;
//    }
//    else {
//        acRecvbuff[lRetVal+1] = '\0';
//        UART_PRINT(acRecvbuff);
//        UART_PRINT("\n\r\n\r");
//    }
//
//    return 0;
//}


static int http_get(int iTLSSockID){
    char acSendBuff[512];
    char acRecvbuff[1460];
    char cCLLength[200];
    char* pcBufHeaders;
    int lRetVal = 0;

    pcBufHeaders = acSendBuff;
    strcpy(pcBufHeaders, GETHEADER);
    pcBufHeaders += strlen(GETHEADER);
    strcpy(pcBufHeaders, HOSTHEADER);
    pcBufHeaders += strlen(HOSTHEADER);
    strcpy(pcBufHeaders, CHEADER);
    pcBufHeaders += strlen(CHEADER);
    strcpy(pcBufHeaders, "\r\n\r\n");

    UART_PRINT(acSendBuff);


    //
    // Send the packet to the server */
    //
    lRetVal = sl_Send(iTLSSockID, acSendBuff, strlen(acSendBuff), 0);
    if(lRetVal < 0) {
        UART_PRINT("GET failed. Error Number: %i\n\r",lRetVal);
        sl_Close(iTLSSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
        return lRetVal;
    }
    lRetVal = sl_Recv(iTLSSockID, &acRecvbuff[0], sizeof(acRecvbuff), 0);
    if(lRetVal < 0) {
        UART_PRINT("Received failed. Error Number: %i\n\r",lRetVal);
        //sl_Close(iSSLSockID);
        GPIO_IF_LedOn(MCU_RED_LED_GPIO);
           return lRetVal;
    }
    else {
        acRecvbuff[lRetVal+1] = '\0';
        UART_PRINT(acRecvbuff);
        UART_PRINT("\n\r\n\r");
    }

    return 0;
}
